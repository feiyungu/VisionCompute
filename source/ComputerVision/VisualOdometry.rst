视觉里程计算
============

本质是通过分析处理相关图像序列来确定的机器人的位置和姿态。 就像汽车里里程表一样。

位置x,y,z,姿态 roll,pitch,yaw.

http://www.fengbing.net/2015/07/25/%E8%A7%86%E8%A7%89%E9%87%8C%E7%A8%8B%E8%AE%A1%E7%AE%80%E4%BB%8B/


这个过程发展过程是这样里程计，odometry,推算定位dead reckoning，到最后视觉计算。

里程计，也就是速度对时间积分，主要通过运动机置的编码器为基础来计算。
dead reckoning,借助于先前己知位置，以及估算出的速度随时间变化量。
实质是一个递推计算问题，现在流行IMU 惯性导航系统。


基本过程
========

#. 获取图像 It,It+1.
#. 对获得图像进行畸变处理
#. 特征检测，跟踪图像序列中特片。
#. 估算图像本质矩阵,估计R,t.
#. 对尺度信息进行估计，最终确定旋转矩阵和平移向量


单目视觉里里程计算
双目视觉里程计算

VIO - Visual Inertial Odometry
VIO和之前的几种SLAM最大的不同在于两点：首先，VIO在硬件上需要传感器的融合，包括相机和六轴陀螺仪，相机产生图片，六轴陀螺仪产生加速度和角速度。相机相对准但相对慢，六轴陀螺仪的原始加速度如果拿来直接积分会在很短的时间飘走（zero-drift），但六轴陀螺仪的频率很高，在手机上都有200Hz。其次，VIO实现的是一种比较复杂而有效的卡尔曼滤波，比如MSCKF（Multi-State-Constraint-Kalman-Filter），侧重的是快速的姿态跟踪，而不花精力来维护全局地图，也不做keyframe based SLAM里面的针对地图的全局优化（bundle adjustment）。最著名的商业化实现就是Google的Project Tango和已经被苹果收购的Flyby Media，其中第二代Project Tango搭载了Nividia TK1并有主动光源的深度摄像头的平板电脑，这款硬件可谓每个做算法的小伙伴的梦幻搭档，具体在这里不多阐述。

